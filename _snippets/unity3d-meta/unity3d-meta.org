#+STARTUP: showall indent
#+options: num:nil
#+TITLE: Fix Unity3d "Missing Script" issues
#+DATE: 2015-06-16
#+Category: Unity3D
#+filetags: Unity3D
#+DESCRIPTION:Fix the annoying "Missing Script" errors that occur when you start sharing assets on a team.



If you've ever worked on a team using Unity3d, somebody has forgotten to commit a .meta file.
It's fairly easy to do, and pretty hard to notice you're doing it (things still work for you, just not others who pull your work in). I've been bitten by this mistake plenty, from myself and others.

* Why does this happen
The .meta file holds GUID for the given asset, which is how the editor associates assets for serialized data (your prefabs and scenes).
When you're serialized data references the wrong id, then you get missing references that show up like "Missing Script" in the editor.

* The solution
Don't let people commit and push assets without metas.

Most version control systems have hooks that you can run your own scripts in,
Mercurials no different.

You can make a pre-commit hook that will look at all your assets
and make sure none are missing a meta.

I've made one below. It's worked fine for windows and mac machines,
and some version of it has been in every unity project I've done since.

#+begin_src python
  import os
  import mercurial.commands

  class HG:
    def __init__(self,ui,repo):
      self.ui = ui
      self.repo = repo
      self.files = self.getAddedFiles()

    def existsInRepo(self, filename):
      self.ui.pushbuffer()
      mercurial.commands.locate(self.ui,self.repo,include=[filename])
      files = self.ui.popbuffer().split("\n")

      for repoFile in files:
        if(pathsEqual(filename,repoFile)):
          return True

      return False

    def getAddedFiles(self):
      self.ui.pushbuffer()
      mercurial.commands.status(self.ui,self.repo,no_status=True, added = True)
      files = self.ui.popbuffer().split("\n")
      return files

    def filesExistInDir(self,dirname):
      self.ui.pushbuffer()
      mercurial.commands.locate(self.ui,self.repo,include=[dirname])
      files = self.ui.popbuffer().split("\n")
      files = filter(lambda x:x != "", files)
      return len(files) > 0

    def show(self, message):
      self.ui.status(message + "\n")

  def precommit(ui,repo, **kwargs):
    hg = HG(ui,repo)
    clean = checkFiles(hg)
    return not clean;

  def pathsEqual(a,b):
    return os.path.normcase(a) == os.path.normcase(b)


  def checkFiles(hg):

    path = os.path.normcase("UnityProject/Assets/")

    result = True
    files = hg.files
    for singleFile in files:
      if singleFile == '':
        continue

      if not os.path.normcase(singleFile).startswith(path):
        continue

      isMetaFile = singleFile.endswith(".meta")

      filename = singleFile if not isMetaFile else singleFile.replace(".meta", "")
      metaFile = singleFile if isMetaFile else singleFile + ".meta"

      isFolder = os.path.isdir(os.path.normcase(filename))

      if isMetaFile:
        if isFolder:
          if not hg.filesExistInDir(filename):
            hg.show("Commiting a meta file'" + metaFile +
              "' for a directory which contains no files." )
            return False
        else:
          if not hg.existsInRepo(filename):
            hg.show("Commiting a meta file'" + metaFile +
              "' without adding associated file '" + filename + "'.")
            return False

      else:
        if not hg.existsInRepo(metaFile):
          hg.show("Committing a file '" + filename +
            "' without adding associated meta file '" + metaFile + "'.")
          return False


    return result
#+end_src

This *doesn't handle .meta files for directories*. I couldn't think of an elegant way
To locate directories from the hg API. Mercurial has no concept of them, files are just at paths.
This hasn't been a problem and, AFAIK, directories aren't referenced in serialized data.

* Usage
** Configure your asset folder path

in =checkFiles= alter the =path= variable so that it points to your assets directory.
The current value reflects my projects, which generally have the unity project folder start at the path =UnityProject=.
The script only checks the files under that path, and it's relative to your repo's root.

** Add the hook
Mercurial needs you to [[https://www.mercurial-scm.org/wiki/Hook][register the hook]] in your hg config.
Everyone on the team should register and use this pre-commit hook in order for it to be effective.
I keep them in hooks directory for the project for that reason.

For example, Lets say you saved the above script to a file in your repo at =hooks/checkMetas.py=.

Then you would add these lines to your =.hg/hgrc= file.

  #+begin_src python
    [hooks]
    precommit.checkMetas = python:/pathToUnityRepo/hooks/checkMetas.py:precommit
  #+end_src
