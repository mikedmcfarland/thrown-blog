{
  "$$data_type": "org-document",
  "properties": {
    "title": ["Automate Unity3d metafiles"],
    "filetags": [],
    "author": ["Michael McFarland"],
    "creator": "Emacs 28.0.60 (Org mode 9.6)",
    "date": ["2015-06-16"],
    "description": [],
    "email": "michaelmcfarland@michaels-air.lan",
    "language": "en"
  },
  "contents": [
    {
      "$$data_type": "org-node",
      "type": "section",
      "ref": "orgfc0a479",
      "properties": {
        "robust-begin": 1,
        "robust-end": 418,
        "post-blank": 1,
        "post-affiliated": 1,
        "mode": "first-section",
        "granularity": null
      },
      "contents": [
        {
          "$$data_type": "org-node",
          "type": "keyword",
          "ref": "org062a9e9",
          "properties": {
            "key": "STARTUP",
            "value": "showall indent",
            "post-blank": 0,
            "post-affiliated": 1,
            "mode": "top-comment",
            "granularity": null
          },
          "contents": []
        },
        {
          "$$data_type": "org-node",
          "type": "keyword",
          "ref": "orgb7a6172",
          "properties": {
            "key": "OPTIONS",
            "value": "num:nil",
            "post-blank": 0,
            "post-affiliated": 27,
            "mode": null,
            "granularity": null
          },
          "contents": []
        },
        {
          "$$data_type": "org-node",
          "type": "keyword",
          "ref": "orgc99d5c4",
          "properties": {
            "key": "TITLE",
            "value": "Automate Unity3d metafiles",
            "post-blank": 0,
            "post-affiliated": 46,
            "mode": null,
            "granularity": null
          },
          "contents": []
        },
        {
          "$$data_type": "org-node",
          "type": "keyword",
          "ref": "orgcf463df",
          "properties": {
            "key": "DATE",
            "value": "2015-06-16",
            "post-blank": 0,
            "post-affiliated": 82,
            "mode": null,
            "granularity": null
          },
          "contents": []
        },
        {
          "$$data_type": "org-node",
          "type": "keyword",
          "ref": "orgca7393e",
          "properties": {
            "key": "CATEGORY",
            "value": "code",
            "post-blank": 1,
            "post-affiliated": 101,
            "mode": null,
            "granularity": null
          },
          "contents": []
        },
        {
          "$$data_type": "org-node",
          "type": "paragraph",
          "ref": "orged17897",
          "properties": {
            "post-blank": 0,
            "post-affiliated": 119,
            "mode": null,
            "granularity": null
          },
          "contents": [
            "If you've ever worked on a team using Unity3d, somebody has forgotten to commit a .meta file.\nIt's fairly easy to do, and pretty hard to notice you're doing it (things still work for you).\nI've been bitten by this mistake plenty, from myself and others.\nIt really sucks, but there's an easy solution.\n"
          ]
        }
      ]
    },
    {
      "$$data_type": "org-node",
      "type": "headline",
      "ref": "org7bdd64b",
      "drawer": {},
      "properties": {
        "tags-all": [],
        "raw-value": "Why this is a problem",
        "pre-blank": 0,
        "robust-begin": 447,
        "robust-end": 714,
        "level": 1,
        "priority": null,
        "tags": [],
        "todo-keyword": null,
        "todo-type": null,
        "post-blank": 1,
        "footnote-section-p": false,
        "archivedp": false,
        "commentedp": false,
        "post-affiliated": 421,
        "title": ["Why this is a problem"],
        "mode": null,
        "granularity": null
      },
      "contents": [
        {
          "$$data_type": "org-node",
          "type": "section",
          "ref": "org900ca00",
          "properties": {
            "robust-begin": 445,
            "robust-end": 714,
            "post-blank": 1,
            "post-affiliated": 445,
            "mode": "section",
            "granularity": null
          },
          "contents": [
            {
              "$$data_type": "org-node",
              "type": "paragraph",
              "ref": "org3bf6750",
              "properties": {
                "post-blank": 0,
                "post-affiliated": 445,
                "mode": "planning",
                "granularity": null
              },
              "contents": [
                "The .meta file holds GUID for the given asset, which is how the editor associates assets for serialized data (your prefabs and scenes).\nWhen you're serialized data references the wrong id, then you get missing references that show up like \"Missing Script\" in the editor.\n"
              ]
            }
          ]
        }
      ]
    },
    {
      "$$data_type": "org-node",
      "type": "headline",
      "ref": "org6af400b",
      "drawer": {},
      "properties": {
        "tags-all": [],
        "raw-value": "What looks like",
        "pre-blank": 0,
        "robust-begin": 737,
        "robust-end": 2289,
        "level": 1,
        "priority": null,
        "tags": [],
        "todo-keyword": null,
        "todo-type": null,
        "post-blank": 2,
        "footnote-section-p": false,
        "archivedp": false,
        "commentedp": false,
        "post-affiliated": 717,
        "title": ["What looks like"],
        "mode": null,
        "granularity": null
      },
      "contents": [
        {
          "$$data_type": "org-node",
          "type": "section",
          "ref": "org5d40946",
          "properties": {
            "robust-begin": 735,
            "robust-end": 2289,
            "post-blank": 2,
            "post-affiliated": 735,
            "mode": "section",
            "granularity": null
          },
          "contents": [
            {
              "$$data_type": "org-node",
              "type": "paragraph",
              "ref": "orgebae6a6",
              "properties": {
                "post-blank": 0,
                "post-affiliated": 735,
                "mode": "planning",
                "granularity": null
              },
              "contents": ["Lets say we have two developers, Bob and Sue.\n"]
            },
            {
              "$$data_type": "org-node",
              "type": "plain-list",
              "ref": "org4c04843",
              "properties": {
                "type": "unordered",
                "structure": [
                  [781, 0, "- ", null, null, null, 826],
                  [826, 0, "- ", null, null, null, 892],
                  [892, 0, "- ", null, null, null, 943],
                  [943, 0, "- ", null, null, null, 1006],
                  [1006, 0, "- ", null, null, null, 1096]
                ],
                "post-blank": 1,
                "post-affiliated": 781,
                "mode": null,
                "granularity": null
              },
              "contents": [
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "org436fed7",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 781,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org160a1bf",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 783,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Bob creates a new behaviour called Foo.cs.\n"
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "org44d68a4",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 826,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org6be67f6",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 828,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Unity automatically generates Foo.cs.meta with a new unique ID.\n"
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "org59dca77",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 892,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "orgc05e7b9",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 894,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Bob adds and pushes Foo.cs, but not Foo.cs.meta.\n"
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "org95eb071",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 943,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org04537a7",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 945,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Sue pulls down the code, and Foo.cs is added to her project.\n"
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "orgc5b1ac9",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 1006,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org8db26d9",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 1008,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Unity generates a Foo.cs.meta with a ",
                        {
                          "$$data_type": "org-node",
                          "type": "bold",
                          "ref": "org45ccc0f",
                          "properties": {
                            "post-blank": 1
                          },
                          "contents": ["new"]
                        },
                        "unique ID (different then Bob's Foo.cs.meta)\n"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "$$data_type": "org-node",
              "type": "paragraph",
              "ref": "org374950f",
              "properties": {
                "post-blank": 1,
                "post-affiliated": 1097,
                "mode": null,
                "granularity": null
              },
              "contents": [
                "Now Bob and Sue have their own IDs for the asset. At best, whoever pushes their meta second\nwill have a merge conflict (Which you then need to resolve by not merging! Choose one or the other.)\n"
              ]
            },
            {
              "$$data_type": "org-node",
              "type": "paragraph",
              "ref": "orgc56214b",
              "properties": {
                "post-blank": 0,
                "post-affiliated": 1291,
                "mode": null,
                "granularity": null
              },
              "contents": [
                "But often it's not caught until later, and something like this happens next:\n"
              ]
            },
            {
              "$$data_type": "org-node",
              "type": "plain-list",
              "ref": "orgdc7d612",
              "properties": {
                "type": "unordered",
                "structure": [
                  [1368, 0, "- ", null, null, null, 1436],
                  [1436, 0, "- ", null, null, null, 1504],
                  [1504, 0, "- ", null, null, null, 1558],
                  [1558, 0, "- ", null, null, null, 1596],
                  [1596, 0, "- ", null, null, null, 1625],
                  [1625, 0, "- ", null, null, null, 1824],
                  [1679, 2, "- ", null, null, null, 1751],
                  [1751, 2, "- ", null, null, null, 1824],
                  [1824, 0, "- ", null, null, null, 1881]
                ],
                "post-blank": 1,
                "post-affiliated": 1368,
                "mode": null,
                "granularity": null
              },
              "contents": [
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "orgd7800b5",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 1368,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org72d35ee",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 1370,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Bob creates a new prefab Bob.prefab, which has the behaviour Foo.\n"
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "org34bda79",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 1436,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "orgc139e1a",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 1438,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Sue creates a new prefab Sue.prefab, which has the behaviour Foo.\n"
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "orgb376433",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 1504,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org66e1f4f",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 1506,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Each prefab is referencing Foo with a different ID.\n"
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "orga118951",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 1558,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org0d8260f",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 1560,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": ["Bob adds and pushes his Bob.prefab.\n"]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "orgf923fe0",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 1596,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org50c681b",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 1598,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": ["Sue pushes her Sue.prefab.\n"]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "org5fc8cfe",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 1625,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org9ee5760",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 1627,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Bob pulls, get's a merge conflict with Foo.cs.meta.\n"
                      ]
                    },
                    {
                      "$$data_type": "org-node",
                      "type": "plain-list",
                      "ref": "org7162c07",
                      "properties": {
                        "type": "unordered",
                        "structure": [
                          [1368, 0, "- ", null, null, null, 1436],
                          [1436, 0, "- ", null, null, null, 1504],
                          [1504, 0, "- ", null, null, null, 1558],
                          [1558, 0, "- ", null, null, null, 1596],
                          [1596, 0, "- ", null, null, null, 1625],
                          [1625, 0, "- ", null, null, null, 1824],
                          [1679, 2, "- ", null, null, null, 1751],
                          [1751, 2, "- ", null, null, null, 1824],
                          [1824, 0, "- ", null, null, null, 1881]
                        ],
                        "post-blank": 0,
                        "post-affiliated": 1679,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        {
                          "$$data_type": "org-node",
                          "type": "item",
                          "ref": "org6639d72",
                          "properties": {
                            "bullet": "- ",
                            "checkbox": null,
                            "counter": null,
                            "pre-blank": 0,
                            "post-blank": 0,
                            "post-affiliated": 1679,
                            "tag": [],
                            "mode": "item",
                            "granularity": null
                          },
                          "contents": [
                            {
                              "$$data_type": "org-node",
                              "type": "paragraph",
                              "ref": "org309ccbb",
                              "properties": {
                                "post-blank": 0,
                                "post-affiliated": 1683,
                                "mode": null,
                                "granularity": null
                              },
                              "contents": [
                                "If he resolves with ",
                                {
                                  "$$data_type": "org-node",
                                  "type": "bold",
                                  "ref": "orgcbeda07",
                                  "properties": {
                                    "post-blank": 1
                                  },
                                  "contents": ["his"]
                                },
                                "he gets a \"Missing Script\" on Sue.prefab.\n"
                              ]
                            }
                          ]
                        },
                        {
                          "$$data_type": "org-node",
                          "type": "item",
                          "ref": "orgd62c89d",
                          "properties": {
                            "bullet": "- ",
                            "checkbox": null,
                            "counter": null,
                            "pre-blank": 0,
                            "post-blank": 0,
                            "post-affiliated": 1751,
                            "tag": [],
                            "mode": "item",
                            "granularity": null
                          },
                          "contents": [
                            {
                              "$$data_type": "org-node",
                              "type": "paragraph",
                              "ref": "orgb09b04e",
                              "properties": {
                                "post-blank": 0,
                                "post-affiliated": 1755,
                                "mode": null,
                                "granularity": null
                              },
                              "contents": [
                                "If he resolves with ",
                                {
                                  "$$data_type": "org-node",
                                  "type": "bold",
                                  "ref": "org8215a36",
                                  "properties": {
                                    "post-blank": 1
                                  },
                                  "contents": ["hers"]
                                },
                                "he gets a \"Missing Script\" on Bob.prefab.\n"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "org5a0f8fd",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 1824,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "orge993a71",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 1826,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "Sue pulls, and see's a \"Missing Script\" on Bob.prefab.\n"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "$$data_type": "org-node",
              "type": "paragraph",
              "ref": "orge87047e",
              "properties": {
                "post-blank": 0,
                "post-affiliated": 1882,
                "mode": null,
                "granularity": null
              },
              "contents": [
                "Add a few more developers into the mix and you can easily have a more complicated example,\nWhere people have repeated \"fixed\" the meta only to cause a different reference to go missing.\nAnd it can happen to more then just scripts, materials and prefabs can also have faulty references.\nFiguring these things out requires too much time, and it's not that fun to explain to new developers (especially artists).\n"
              ]
            }
          ]
        }
      ]
    },
    {
      "$$data_type": "org-node",
      "type": "headline",
      "ref": "org8d5991e",
      "drawer": {},
      "properties": {
        "tags-all": [],
        "raw-value": "A solution",
        "pre-blank": 0,
        "robust-begin": 2308,
        "robust-end": 5125,
        "level": 1,
        "priority": null,
        "tags": [],
        "todo-keyword": null,
        "todo-type": null,
        "post-blank": 2,
        "footnote-section-p": false,
        "archivedp": false,
        "commentedp": false,
        "post-affiliated": 2293,
        "title": ["A solution"],
        "mode": null,
        "granularity": null,
        "cached": true,
        "org-element--cache-sync-key": [13]
      },
      "contents": [
        {
          "$$data_type": "org-node",
          "type": "section",
          "ref": "org86caf0c",
          "properties": {
            "robust-begin": 2306,
            "robust-end": 5125,
            "post-blank": 2,
            "post-affiliated": 2306,
            "mode": "section",
            "granularity": null
          },
          "contents": [
            {
              "$$data_type": "org-node",
              "type": "paragraph",
              "ref": "orgc691d9f",
              "properties": {
                "post-blank": 1,
                "post-affiliated": 2306,
                "mode": "planning",
                "granularity": null
              },
              "contents": [
                "Solve it with software, don't let people share assets without metas.\n"
              ]
            },
            {
              "$$data_type": "org-node",
              "type": "paragraph",
              "ref": "org44835cf",
              "properties": {
                "post-blank": 1,
                "post-affiliated": 2376,
                "mode": null,
                "granularity": null
              },
              "contents": [
                "Most version control systems have hooks that you can run your own scripts in,\nMercurials no different.\n"
              ]
            },
            {
              "$$data_type": "org-node",
              "type": "paragraph",
              "ref": "org669ba7b",
              "properties": {
                "post-blank": 1,
                "post-affiliated": 2480,
                "mode": null,
                "granularity": null
              },
              "contents": [
                "You can make a pre-commit hook that will look at all your assets\nand make sure none are missing a meta.\n"
              ]
            },
            {
              "$$data_type": "org-node",
              "type": "paragraph",
              "ref": "org6739d72",
              "properties": {
                "post-blank": 1,
                "post-affiliated": 2585,
                "mode": null,
                "granularity": null
              },
              "contents": [
                "I've made one below. It's worked fine for windows and mac machines,\nand some version of it has been in every unity project I've done since.\n"
              ]
            },
            {
              "$$data_type": "org-node",
              "type": "src-block",
              "ref": "org3059652",
              "properties": {
                "language": "python",
                "switches": null,
                "parameters": null,
                "number-lines": null,
                "preserve-indent": false,
                "retain-labels": true,
                "use-labels": true,
                "label-fmt": null,
                "value": "  import os\n  import mercurial.commands\n\n  class HG:\n    def __init__(self,ui,repo):\n      self.ui = ui\n      self.repo = repo\n      self.files = self.getAddedFiles()\n\n    def existsInRepo(self, filename):\n      self.ui.pushbuffer()\n      mercurial.commands.locate(self.ui,self.repo,include=[filename])\n      files = self.ui.popbuffer().split(\"\\n\")\n\n      for repoFile in files:\n        if(pathsEqual(filename,repoFile)):\n          return True\n\n      return False\n\n    def getAddedFiles(self):\n      self.ui.pushbuffer()\n      mercurial.commands.status(self.ui,self.repo,no_status=True, added = True)\n      files = self.ui.popbuffer().split(\"\\n\")\n      return files\n\n    def filesExistInDir(self,dirname):\n      self.ui.pushbuffer()\n      mercurial.commands.locate(self.ui,self.repo,include=[dirname])\n      files = self.ui.popbuffer().split(\"\\n\")\n      files = filter(lambda x:x != \"\", files)\n      return len(files) > 0\n\n    def show(self, message):\n      self.ui.status(message + \"\\n\")\n\n  def precommit(ui,repo, **kwargs):\n    hg = HG(ui,repo)\n    clean = checkFiles(hg)\n    return not clean;\n\n  def pathsEqual(a,b):\n    return os.path.normcase(a) == os.path.normcase(b)\n\n\n  def checkFiles(hg):\n\n    path = os.path.normcase(\"UnityProject/Assets/\")\n\n    result = True\n    files = hg.files\n    for singleFile in files:\n      if singleFile == '':\n        continue\n\n      if not os.path.normcase(singleFile).startswith(path):\n        continue\n\n      isMetaFile = singleFile.endswith(\".meta\")\n\n      filename = singleFile if not isMetaFile else singleFile.replace(\".meta\", \"\")\n      metaFile = singleFile if isMetaFile else singleFile + \".meta\"\n\n      isFolder = os.path.isdir(os.path.normcase(filename))\n\n      if isMetaFile:\n        if isFolder:\n          if not hg.filesExistInDir(filename):\n            hg.show(\"Commiting a meta file'\" + metaFile +\n              \"' for a directory which contains no files.\" )\n            return False\n        else:\n          if not hg.existsInRepo(filename):\n            hg.show(\"Commiting a meta file'\" + metaFile +\n              \"' without adding associated file '\" + filename + \"'.\")\n            return False\n\n      else:\n        if not hg.existsInRepo(metaFile):\n          hg.show(\"Committing a file '\" + filename +\n            \"' without adding associated meta file '\" + metaFile + \"'.\")\n          return False\n\n\n    return result\n",
                "post-blank": 0,
                "post-affiliated": 2726,
                "mode": null,
                "granularity": null
              },
              "contents": []
            }
          ]
        }
      ]
    },
    {
      "$$data_type": "org-node",
      "type": "headline",
      "ref": "orga100893",
      "drawer": {},
      "properties": {
        "tags-all": [],
        "raw-value": "Installation",
        "pre-blank": 0,
        "robust-begin": 5146,
        "robust-end": 6042,
        "level": 1,
        "priority": null,
        "tags": [],
        "todo-keyword": null,
        "todo-type": null,
        "post-blank": 2,
        "footnote-section-p": false,
        "archivedp": false,
        "commentedp": false,
        "post-affiliated": 5129,
        "title": ["Installation"],
        "mode": null,
        "granularity": null,
        "cached": true,
        "org-element--cache-sync-key": [23]
      },
      "contents": [
        {
          "$$data_type": "org-node",
          "type": "headline",
          "ref": "orgd23f0e7",
          "drawer": {},
          "properties": {
            "tags-all": [],
            "raw-value": "Configure your asset folder path",
            "pre-blank": 1,
            "robust-begin": 5183,
            "robust-end": 5474,
            "level": 2,
            "priority": null,
            "tags": [],
            "todo-keyword": null,
            "todo-type": null,
            "post-blank": 1,
            "footnote-section-p": false,
            "archivedp": false,
            "commentedp": false,
            "post-affiliated": 5144,
            "title": ["Configure your asset folder path"],
            "mode": "section",
            "granularity": null
          },
          "contents": [
            {
              "$$data_type": "org-node",
              "type": "section",
              "ref": "orgb6ffe00",
              "properties": {
                "robust-begin": 5181,
                "robust-end": 5474,
                "post-blank": 1,
                "post-affiliated": 5181,
                "mode": "section",
                "granularity": null
              },
              "contents": [
                {
                  "$$data_type": "org-node",
                  "type": "paragraph",
                  "ref": "orgfc7b916",
                  "properties": {
                    "post-blank": 0,
                    "post-affiliated": 5181,
                    "mode": "planning",
                    "granularity": null
                  },
                  "contents": [
                    "in ",
                    {
                      "$$data_type": "org-node",
                      "type": "verbatim",
                      "ref": "org70e80ac",
                      "properties": {
                        "post-blank": 1,
                        "value": "checkFiles"
                      },
                      "contents": []
                    },
                    "alter the ",
                    {
                      "$$data_type": "org-node",
                      "type": "verbatim",
                      "ref": "orgb7f98bd",
                      "properties": {
                        "post-blank": 1,
                        "value": "path"
                      },
                      "contents": []
                    },
                    "variable so that it points to your assets directory.\nThe current value reflects my projects, which generally have the unity project folder start at the path ",
                    {
                      "$$data_type": "org-node",
                      "type": "verbatim",
                      "ref": "orga69b6a2",
                      "properties": {
                        "post-blank": 0,
                        "value": "UnityProject"
                      },
                      "contents": []
                    },
                    ".\nThe script only checks the files under that path, and it's relative to your repo's root.\n"
                  ]
                }
              ]
            }
          ]
        },
        {
          "$$data_type": "org-node",
          "type": "headline",
          "ref": "orgdcf45ff",
          "drawer": {},
          "properties": {
            "tags-all": [],
            "raw-value": "Add the hook",
            "pre-blank": 0,
            "robust-begin": 5495,
            "robust-end": 6042,
            "level": 2,
            "priority": null,
            "tags": [],
            "todo-keyword": null,
            "todo-type": null,
            "post-blank": 2,
            "footnote-section-p": false,
            "archivedp": false,
            "commentedp": false,
            "post-affiliated": 5477,
            "title": ["Add the hook"],
            "mode": null,
            "granularity": null,
            "cached": true,
            "org-element--cache-sync-key": [23]
          },
          "contents": [
            {
              "$$data_type": "org-node",
              "type": "section",
              "ref": "org487cbfd",
              "properties": {
                "robust-begin": 5493,
                "robust-end": 6042,
                "post-blank": 2,
                "post-affiliated": 5493,
                "mode": "section",
                "granularity": null
              },
              "contents": [
                {
                  "$$data_type": "org-node",
                  "type": "paragraph",
                  "ref": "org0d9f3c4",
                  "properties": {
                    "post-blank": 1,
                    "post-affiliated": 5493,
                    "mode": "planning",
                    "granularity": null
                  },
                  "contents": [
                    "Mercurial needs you to ",
                    {
                      "$$data_type": "org-node",
                      "type": "link",
                      "ref": "orgad118ad",
                      "properties": {
                        "type": "https",
                        "path": "//mercurial.selenic.com/wiki/Hook",
                        "format": "bracket",
                        "raw-link": "https://mercurial.selenic.com/wiki/Hook",
                        "application": null,
                        "search-option": null,
                        "post-blank": 1,
                        "is-internal": false,
                        "target-ref": null,
                        "is-inline-image": false
                      },
                      "contents": ["register the hook"]
                    },
                    "in your hg config.\nEveryone on the team should register and use this pre-commit hook in order for it to be effective.\nI keep them in hooks directory for the project for that reason.\n"
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "paragraph",
                  "ref": "org491f1f4",
                  "properties": {
                    "post-blank": 1,
                    "post-affiliated": 5762,
                    "mode": null,
                    "granularity": null
                  },
                  "contents": [
                    "For example, Lets say you saved the above script to a file in your repo at ",
                    {
                      "$$data_type": "org-node",
                      "type": "verbatim",
                      "ref": "org08510bd",
                      "properties": {
                        "post-blank": 0,
                        "value": "hooks/checkMetas.py"
                      },
                      "contents": []
                    },
                    ".\n"
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "paragraph",
                  "ref": "orge7f018b",
                  "properties": {
                    "post-blank": 1,
                    "post-affiliated": 5861,
                    "mode": null,
                    "granularity": null
                  },
                  "contents": [
                    "Then you would add these lines to your ",
                    {
                      "$$data_type": "org-node",
                      "type": "verbatim",
                      "ref": "orgff4a1d3",
                      "properties": {
                        "post-blank": 1,
                        "value": ".hg/hgrc"
                      },
                      "contents": []
                    },
                    "file.\n"
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "src-block",
                  "ref": "org1f64a54",
                  "properties": {
                    "language": "python",
                    "switches": null,
                    "parameters": null,
                    "number-lines": null,
                    "preserve-indent": false,
                    "retain-labels": true,
                    "use-labels": true,
                    "label-fmt": null,
                    "value": "    [hooks]\n    precommit.checkMetas = python:/pathToUnityRepo/hooks/checkMetas.py:precommit\n",
                    "post-blank": 0,
                    "post-affiliated": 5918,
                    "mode": null,
                    "granularity": null
                  },
                  "contents": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "$$data_type": "org-node",
      "type": "headline",
      "ref": "orgda8bb8e",
      "drawer": {},
      "properties": {
        "tags-all": [],
        "raw-value": "Disclaimer",
        "pre-blank": 0,
        "robust-begin": 6061,
        "robust-end": 6460,
        "level": 1,
        "priority": null,
        "tags": [],
        "todo-keyword": null,
        "todo-type": null,
        "post-blank": 0,
        "footnote-section-p": false,
        "archivedp": false,
        "commentedp": false,
        "post-affiliated": 6046,
        "title": ["Disclaimer"],
        "mode": null,
        "granularity": null
      },
      "contents": [
        {
          "$$data_type": "org-node",
          "type": "section",
          "ref": "orgf35c310",
          "properties": {
            "robust-begin": 6059,
            "robust-end": 6460,
            "post-blank": 0,
            "post-affiliated": 6059,
            "mode": "section",
            "granularity": null
          },
          "contents": [
            {
              "$$data_type": "org-node",
              "type": "plain-list",
              "ref": "orgeca3eb2",
              "properties": {
                "type": "unordered",
                "structure": [
                  [6059, 0, "- ", null, null, null, 6341],
                  [6341, 0, "- ", null, null, null, 6429],
                  [6429, 0, "- ", null, null, null, 6462]
                ],
                "post-blank": 0,
                "post-affiliated": 6059,
                "mode": "planning",
                "granularity": null
              },
              "contents": [
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "org90ef092",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 1,
                    "post-affiliated": 6059,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org329c9ce",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 6061,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "This ",
                        {
                          "$$data_type": "org-node",
                          "type": "bold",
                          "ref": "org1170eaf",
                          "properties": {
                            "post-blank": 0
                          },
                          "contents": [
                            "doesn't handle .meta files for directories"
                          ]
                        },
                        ". I couldn't think of an elegant way\nTo locate directories from the hg API. Mercurial has no concept of them, files are just at paths.\nThis isn't such a big deal since, AFAIK, directories aren't referenced in serialized data.\n"
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "org5ac087a",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 6341,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "org12ef1d4",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 6343,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": [
                        "I don't program in Python much so this likely ",
                        {
                          "$$data_type": "org-node",
                          "type": "bold",
                          "ref": "org78b4a00",
                          "properties": {
                            "post-blank": 0
                          },
                          "contents": ["isn't idiomatic python"]
                        },
                        ". But it works.\n"
                      ]
                    }
                  ]
                },
                {
                  "$$data_type": "org-node",
                  "type": "item",
                  "ref": "orgc9b8b6a",
                  "properties": {
                    "bullet": "- ",
                    "checkbox": null,
                    "counter": null,
                    "pre-blank": 0,
                    "post-blank": 0,
                    "post-affiliated": 6429,
                    "tag": [],
                    "mode": "item",
                    "granularity": null
                  },
                  "contents": [
                    {
                      "$$data_type": "org-node",
                      "type": "paragraph",
                      "ref": "orgf60c362",
                      "properties": {
                        "post-blank": 0,
                        "post-affiliated": 6431,
                        "mode": null,
                        "granularity": null
                      },
                      "contents": ["This script is provided as is.\n"]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
