{
"$$data_type": "org-document",
"properties": {
"title": [
"Fun with scalajs lenses and react"
],
"filetags": [
"scala",
"fp"
],
"author": [
"Michael McFarland"
],
"creator": "Emacs 28.0.60 (Org mode 9.6)",
"date": [
"2015-06-16"
],
"description": [],
"email": "michaelmcfarland@michaels-air.lan",
"language": "en"
},
"contents": [
{
"$$data_type": "org-node",
"type": "section",
"ref": "orgda9ffcf",
"properties": {
"robust-begin": 1,
"robust-end": 427,
"post-blank": 2,
"post-affiliated": 1,
"mode": "first-section",
"granularity": null
},
"contents": [
{
"$$data_type": "org-node",
"type": "keyword",
"ref": "org2ccd6a0",
"properties": {
"key": "TITLE",
"value": "Fun with scalajs lenses and react",
"post-blank": 0,
"post-affiliated": 1,
"mode": "top-comment",
"granularity": null
},
"contents": []
},
{
"$$data_type": "org-node",
"type": "keyword",
"ref": "orga9b7108",
"properties": {
"key": "DATE",
"value": "2015-06-16",
"post-blank": 0,
"post-affiliated": 44,
"mode": null,
"granularity": null
},
"contents": []
},
{
"$$data_type": "org-node",
"type": "keyword",
"ref": "org0ca9f6e",
"properties": {
"key": "CATEGORY",
"value": "Scala",
"post-blank": 0,
"post-affiliated": 63,
"mode": null,
"granularity": null
},
"contents": []
},
{
"$$data_type": "org-node",
"type": "keyword",
"ref": "orgcec2e93",
"properties": {
"key": "FILETAGS",
"value": ":scala:fp",
"post-blank": 0,
"post-affiliated": 81,
"mode": null,
"granularity": null
},
"contents": []
},
{
"$$data_type": "org-node",
"type": "keyword",
"ref": "org6ecf36d",
"properties": {
"key": "DESCRIPTION",
"value": "Examples where lenses simplified scalajs react code",
"post-blank": 1,
"post-affiliated": 103,
"mode": null,
"granularity": null
},
"contents": []
},
{
"$$data_type": "org-node",
"type": "paragraph",
"ref": "org8a34077",
"properties": {
"post-blank": 1,
"post-affiliated": 171,
"mode": null,
"granularity": null
},
"contents": [
"I've been working (freelance) on a single page app using ",
{
"$$data_type": "org-node",
"type": "link",
"ref": "orgaf327b3",
"properties": {
"type": "https",
"path": "//github.com/japgolly/scalajs-react",
"format": "bracket",
"raw-link": "https://github.com/japgolly/scalajs-react",
"application": null,
"search-option": null,
"post-blank": 0,
"is-internal": false,
"target-ref": null,
"is-inline-image": false
},
"contents": [
"scalajs-react"
]
},
"\n"
]
},
{
"$$data_type": "org-node",
"type": "paragraph",
"ref": "org06bb306",
"properties": {
"post-blank": 0,
"post-affiliated": 290,
"mode": null,
"granularity": null
},
"contents": [
"and lenses helped me cleanup some code.\nThey were fun and straightforward to get started with, so I wanted to quickly share my experience.\n"
]
}
]
},
{
"$$data_type": "org-node",
"type": "headline",
"ref": "org815a167",
"drawer": {

},
"properties": {
"tags-all": [
"scala",
"fp"
],
"raw-value": "The model",
"pre-blank": 1,
"robust-begin": 446,
"robust-end": 833,
"level": 1,
"priority": null,
"tags": [],
"todo-keyword": null,
"todo-type": null,
"post-blank": 2,
"footnote-section-p": false,
"archivedp": false,
"commentedp": false,
"post-affiliated": 431,
"title": [
"The model"
],
"mode": null,
"granularity": null
},
"contents": [
{
"$$data_type": "org-node",
"type": "section",
"ref": "orge226d95",
"properties": {
"robust-begin": 444,
"robust-end": 833,
"post-blank": 2,
"post-affiliated": 444,
"mode": "section",
"granularity": null
},
"contents": [
{
"$$data_type": "org-node",
"type": "paragraph",
"ref": "org4f89745",
"properties": {
"post-blank": 1,
"post-affiliated": 444,
"mode": "planning",
"granularity": null
},
"contents": [
"Lets say our app has some configuration that can be edited by the user.\nWe'll model it with some case classes:\n"
]
},
{
"$$data_type": "org-node",
"type": "src-block",
"ref": "org0d1631f",
"properties": {
"language": "scala",
"switches": null,
"parameters": null,
"number-lines": null,
"preserve-indent": false,
"retain-labels": true,
"use-labels": true,
"label-fmt": null,
"value": "  case class Config(restricted: String, mailConfig:MailConfig)\n\n  object Config{\n\n    lazy val default = Config(\"thrownforaloop.com\",MailConfig(\"localhost\",9000,\"mike\"))\n  }\n\n  case class MailConfig(\n    host:String,\n    port:Int,\n    user:String\n  )\n",
"post-blank": 0,
"post-affiliated": 556,
"mode": null,
"granularity": null
},
"contents": []
}
]
}
]
},
{
"$$data_type": "org-node",
"type": "headline",
"ref": "orgc362bd8",
"drawer": {

},
"properties": {
"tags-all": [
"scala",
"fp"
],
"raw-value": "The editable form",
"pre-blank": 0,
"robust-begin": 860,
"robust-end": 2509,
"level": 1,
"priority": null,
"tags": [],
"todo-keyword": null,
"todo-type": null,
"post-blank": 1,
"footnote-section-p": false,
"archivedp": false,
"commentedp": false,
"post-affiliated": 837,
"title": [
"The editable form"
],
"mode": null,
"granularity": null
},
"contents": [
{
"$$data_type": "org-node",
"type": "section",
"ref": "orgf82038d",
"properties": {
"robust-begin": 858,
"robust-end": 2509,
"post-blank": 1,
"post-affiliated": 858,
"mode": "section",
"granularity": null
},
"contents": [
{
"$$data_type": "org-node",
"type": "paragraph",
"ref": "org1034ff4",
"properties": {
"post-blank": 1,
"post-affiliated": 858,
"mode": "planning",
"granularity": null
},
"contents": [
"Lets make a few react components so that we can construct our form.\nWe'll add bootstrap classes to make it a littler more friendly.\n"
]
},
{
"$$data_type": "org-node",
"type": "src-block",
"ref": "orgc8a8555",
"properties": {
"language": "scala",
"switches": null,
"parameters": null,
"number-lines": null,
"preserve-indent": false,
"retain-labels": true,
"use-labels": true,
"label-fmt": null,
"value": "  object Form{\n    case class Field(name:String,value:String,onChange:ReactEventI=>Unit)\n\n\n    val field = ReactComponentB[Field](\"form-field\")\n      .render(P=>{\n        val Field(name,value,onChange) = P\n        <.div(^.`class`:=\"form-group\",\n          <.label(\n            ^.`for` :=name,\n            name.capitalize),\n          <.input(\n            ^.tpe := \"text\",\n            ^.`class`:=\"form-control\",\n            ^.id := name,\n            ^.value := value,\n            ^.onChange ==> onChange\n          ))\n      })\n      .build\n\n    val form = ReactComponentB[Seq[Field]](\"form\")\n      .render(P=>{\n        <.div(^.`class`:=\"panel panel-default\",\n          <.div(^.`class`:=\"panel\",\n            <.div(^.`class`:=\"panel-heading\",\n              \"Config Edit\"\n            ),\n            <.div(^.`class`:=\"panel-body\",\n              <.form(\n                P.map(f => field.withKey(f.name)(f))\n              )\n            )\n          )\n        )\n      })\n    .build\n\n    // a static construction of our form\n    def static() = {\n      val Config(restricted,MailConfig(host,port,user)) = Config.default\n      val noOp = (e:ReactEventI) => {}\n      val fields = Seq(\n          Field(\"restricted\" ,restricted    ,noOp),\n          Field(\"host\"       ,host          ,noOp),\n          Field(\"user\"       ,user          ,noOp),\n          Field(\"port\"       ,port.toString ,noOp))\n\n      form(fields)\n    }\n  }\n",
"post-blank": 1,
"post-affiliated": 991,
"mode": null,
"granularity": null
},
"contents": []
},
{
"$$data_type": "org-node",
"type": "paragraph",
"ref": "orgef82766",
"properties": {
"post-blank": 0,
"post-affiliated": 2427,
"mode": null,
"granularity": null
},
"contents": [
"Now we have a form component that'll build or inputs given a sequence of ",
{
"$$data_type": "org-node",
"type": "verbatim",
"ref": "org89038c0",
"properties": {
"post-blank": 0,
"value": "Field"
},
"contents": []
},
"'s.\n"
]
}
]
}
]
},
{
"$$data_type": "org-node",
"type": "headline",
"ref": "orgbc4b98b",
"drawer": {

},
"properties": {
"tags-all": [
"scala",
"fp"
],
"raw-value": "Making it dynamic",
"pre-blank": 1,
"robust-begin": 2535,
"robust-end": 4164,
"level": 1,
"priority": null,
"tags": [],
"todo-keyword": null,
"todo-type": null,
"post-blank": 0,
"footnote-section-p": false,
"archivedp": false,
"commentedp": false,
"post-affiliated": 2512,
"title": [
"Making it dynamic"
],
"mode": null,
"granularity": null
},
"contents": [
{
"$$data_type": "org-node",
"type": "section",
"ref": "orgc561a73",
"properties": {
"robust-begin": 2533,
"robust-end": 4164,
"post-blank": 0,
"post-affiliated": 2533,
"mode": "section",
"granularity": null
},
"contents": [
{
"$$data_type": "org-node",
"type": "paragraph",
"ref": "org12add4b",
"properties": {
"post-blank": 1,
"post-affiliated": 2533,
"mode": "planning",
"granularity": null
},
"contents": [
"Lets make this form actually edit the model.\nWe'll do that by making another component which will construct the form.\n"
]
},
{
"$$data_type": "org-node",
"type": "src-block",
"ref": "orgf3303b3",
"properties": {
"language": "scala",
"switches": null,
"parameters": null,
"number-lines": null,
"preserve-indent": false,
"retain-labels": true,
"use-labels": true,
"label-fmt": null,
"value": "  object ConfigForm{\n    case class Props(onSubmit:Config=>Unit)\n    case class State(config:Config)\n\n    class Backend(t:BackendScope[Unit,State]){\n      def modifyRestricted(e:ReactEventI) = {\n        t.modState(\n          s=>s.copy(\n            config=s.config.copy(\n              restricted=e.currentTarget.value)))\n      }\n      def modifyHost(e:ReactEventI) = {\n        t.modState(\n          s=>s.copy(\n            config=s.config.copy(\n              mailConfig=s.config.mailConfig.copy(\n                host=e.currentTarget.value))))\n      }\n      def modifyUser(e:ReactEventI) = {\n        t.modState(\n          s=>s.copy(\n            config=s.config.copy(\n              mailConfig=s.config.mailConfig.copy(\n                user=e.currentTarget.value))))\n      }\n\n    }\n\n    val form = ReactComponentB[Unit](\"config-form\")\n      .initialState(State(Config.default))\n      .backend(new Backend(_))\n      .render((P,S,B) =>{\n        val Config(restricted,MailConfig(host,port,user)) = S.config\n        val Field = Form.Field\n\n        val fields = Seq(\n          Field(\"restricted\" ,restricted ,B.modifyRestricted),\n          Field(\"host\"       ,host       ,B.modifyHost),\n          Field(\"user\"       ,user       ,B.modifyUser))\n\n        Form.form(fields)\n      })\n      .buildU\n\n  }\n",
"post-blank": 1,
"post-affiliated": 2652,
"mode": null,
"granularity": null
},
"contents": []
},
{
"$$data_type": "org-node",
"type": "paragraph",
"ref": "org79ba6d7",
"properties": {
"post-blank": 0,
"post-affiliated": 3970,
"mode": null,
"granularity": null
},
"contents": [
"Those modify functions work, but man there's a lot of copying of case classes, it'd be nice if we could build functions that take care of that for us cleanly, especially as these structures grow.\n"
]
}
]
}
]
},
{
"$$data_type": "org-node",
"type": "headline",
"ref": "org404414d",
"drawer": {

},
"properties": {
"tags-all": [
"scala",
"fp"
],
"raw-value": "Enter lenses",
"pre-blank": 1,
"robust-begin": 4184,
"robust-end": 5098,
"level": 1,
"priority": null,
"tags": [],
"todo-keyword": null,
"todo-type": null,
"post-blank": 0,
"footnote-section-p": false,
"archivedp": false,
"commentedp": false,
"post-affiliated": 4166,
"title": [
"Enter lenses"
],
"mode": null,
"granularity": null
},
"contents": [
{
"$$data_type": "org-node",
"type": "section",
"ref": "org5d1bdf9",
"properties": {
"robust-begin": 4182,
"robust-end": 5098,
"post-blank": 0,
"post-affiliated": 4182,
"mode": "section",
"granularity": null
},
"contents": [
{
"$$data_type": "org-node",
"type": "paragraph",
"ref": "org10f9baa",
"properties": {
"post-blank": 1,
"post-affiliated": 4182,
"mode": "planning",
"granularity": null
},
"contents": [
"Lenses give us a way to cleanly and safely edit a piece of a larger immutable structure.\n"
]
},
{
"$$data_type": "org-node",
"type": "src-block",
"ref": "org3801c47",
"properties": {
"language": "scala",
"switches": null,
"parameters": null,
"number-lines": null,
"preserve-indent": false,
"retain-labels": true,
"use-labels": true,
"label-fmt": null,
"value": "  val _config     = Lens[State,ConfigItem]      (_.config)     (v => s => s.copy(config=v))\n  val _restricted = Lens[ConfigItem,String]     (_.restricted) (v => c => c.copy(restricted=v))\n  val _mail       = Lens[ConfigItem,MailConfig] (_.mailConfig) (v => c => c.copy(mailConfig=v))\n  val _host       = Lens[MailConfig,String]     (_.host)       (v => m => m.copy(host=v))\n  val _port       = Lens[MailConfig,Int]        (_.port)       (v => m => m.copy(port=v))\n  val _user       = Lens[MailConfig,String]     (_.user)       (v => m => m.copy(user=v))\n  val _password   = Lens[MailConfig,String]     (_.password)   (v => m => m.copy(password=v))\n\n  val _eventV     = Lens[ReactEventI,String]    (_.currentTarget.value)   (v => m => m.copy(password=v))\n  val _mailconfig = _config composeLens _mail\n",
"post-blank": 0,
"post-affiliated": 4272,
"mode": null,
"granularity": null
},
"contents": []
}
]
}
]
}
]
}
