{"pageProps":{"posts":[{"name":"scalajs-lenses","doc":{"$$data_type":"org-document","properties":{"title":["Fun with scalajs lenses and react"],"filetags":[],"author":["Michael McFarland"],"creator":"Emacs 28.0.60 (Org mode 9.6)","date":["2015-06-16"],"description":[],"email":"michaelmcfarland@michaels-air.lan","language":"en"},"contents":[{"$$data_type":"org-node","type":"section","ref":"org749f2ec","properties":{"robust-begin":1,"robust-end":405,"post-blank":2,"post-affiliated":1,"mode":"first-section","granularity":null},"contents":[{"$$data_type":"org-node","type":"keyword","ref":"org61b4139","properties":{"key":"TITLE","value":"Fun with scalajs lenses and react","post-blank":0,"post-affiliated":1,"mode":"top-comment","granularity":null},"contents":[]},{"$$data_type":"org-node","type":"keyword","ref":"orgbcd6ec4","properties":{"key":"DATE","value":"2015-06-16","post-blank":0,"post-affiliated":44,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"keyword","ref":"orga5707ea","properties":{"key":"CATEGORY","value":"Scala","post-blank":0,"post-affiliated":63,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"keyword","ref":"org409a433","properties":{"key":"DESCRIPTION","value":"Examples where lenses simplified scalajs react code","post-blank":1,"post-affiliated":81,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"paragraph","ref":"org0034273","properties":{"post-blank":1,"post-affiliated":149,"mode":null,"granularity":null},"contents":["I've been working (freelance) on a single page app using ",{"$$data_type":"org-node","type":"link","ref":"org4319470","properties":{"type":"https","path":"//github.com/japgolly/scalajs-react","format":"bracket","raw-link":"https://github.com/japgolly/scalajs-react","application":null,"search-option":null,"post-blank":0,"is-internal":false,"target-ref":null,"is-inline-image":false},"contents":["scalajs-react"]},"\n"]},{"$$data_type":"org-node","type":"paragraph","ref":"org05a0753","properties":{"post-blank":0,"post-affiliated":268,"mode":null,"granularity":null},"contents":["and lenses helped me cleanup some code.\nThey were fun and straightforward to get started with, so I wanted to quickly share my experience.\n"]}]},{"$$data_type":"org-node","type":"headline","ref":"orgbd57c0a","drawer":{},"properties":{"tags-all":[],"raw-value":"The model","pre-blank":2,"robust-begin":425,"robust-end":812,"level":1,"priority":null,"tags":[],"todo-keyword":null,"todo-type":null,"post-blank":2,"footnote-section-p":false,"archivedp":false,"commentedp":false,"post-affiliated":409,"title":["The model"],"mode":null,"granularity":null,"cached":true,"org-element--cache-sync-key":[33]},"contents":[{"$$data_type":"org-node","type":"section","ref":"org30672d1","properties":{"robust-begin":423,"robust-end":812,"post-blank":2,"post-affiliated":423,"mode":"section","granularity":null},"contents":[{"$$data_type":"org-node","type":"paragraph","ref":"org0b5c82b","properties":{"post-blank":1,"post-affiliated":423,"mode":"planning","granularity":null},"contents":["Lets say our app has some configuration that can be edited by the user.\nWe'll model it with some case classes:\n"]},{"$$data_type":"org-node","type":"src-block","ref":"org7ddc0f7","properties":{"language":"scala","switches":null,"parameters":null,"number-lines":null,"preserve-indent":false,"retain-labels":true,"use-labels":true,"label-fmt":null,"value":"  case class Config(restricted: String, mailConfig:MailConfig)\n\n  object Config{\n\n    lazy val default = Config(\"thrownforaloop.com\",MailConfig(\"localhost\",9000,\"mike\"))\n  }\n\n  case class MailConfig(\n    host:String,\n    port:Int,\n    user:String\n  )\n","post-blank":0,"post-affiliated":535,"mode":null,"granularity":null},"contents":[]}]}]},{"$$data_type":"org-node","type":"headline","ref":"org9092a16","drawer":{},"properties":{"tags-all":[],"raw-value":"The editable form","pre-blank":0,"robust-begin":839,"robust-end":2488,"level":1,"priority":null,"tags":[],"todo-keyword":null,"todo-type":null,"post-blank":1,"footnote-section-p":false,"archivedp":false,"commentedp":false,"post-affiliated":816,"title":["The editable form"],"mode":null,"granularity":null,"cached":true,"org-element--cache-sync-key":[22]},"contents":[{"$$data_type":"org-node","type":"section","ref":"orga279fb7","properties":{"robust-begin":837,"robust-end":2488,"post-blank":1,"post-affiliated":837,"mode":"section","granularity":null},"contents":[{"$$data_type":"org-node","type":"paragraph","ref":"org41c39c3","properties":{"post-blank":1,"post-affiliated":837,"mode":"planning","granularity":null},"contents":["Lets make a few react components so that we can construct our form.\nWe'll add bootstrap classes to make it a littler more friendly.\n"]},{"$$data_type":"org-node","type":"src-block","ref":"org3c44142","properties":{"language":"scala","switches":null,"parameters":null,"number-lines":null,"preserve-indent":false,"retain-labels":true,"use-labels":true,"label-fmt":null,"value":"  object Form{\n    case class Field(name:String,value:String,onChange:ReactEventI=>Unit)\n\n\n    val field = ReactComponentB[Field](\"form-field\")\n      .render(P=>{\n        val Field(name,value,onChange) = P\n        <.div(^.`class`:=\"form-group\",\n          <.label(\n            ^.`for` :=name,\n            name.capitalize),\n          <.input(\n            ^.tpe := \"text\",\n            ^.`class`:=\"form-control\",\n            ^.id := name,\n            ^.value := value,\n            ^.onChange ==> onChange\n          ))\n      })\n      .build\n\n    val form = ReactComponentB[Seq[Field]](\"form\")\n      .render(P=>{\n        <.div(^.`class`:=\"panel panel-default\",\n          <.div(^.`class`:=\"panel\",\n            <.div(^.`class`:=\"panel-heading\",\n              \"Config Edit\"\n            ),\n            <.div(^.`class`:=\"panel-body\",\n              <.form(\n                P.map(f => field.withKey(f.name)(f))\n              )\n            )\n          )\n        )\n      })\n    .build\n\n    // a static construction of our form\n    def static() = {\n      val Config(restricted,MailConfig(host,port,user)) = Config.default\n      val noOp = (e:ReactEventI) => {}\n      val fields = Seq(\n          Field(\"restricted\" ,restricted    ,noOp),\n          Field(\"host\"       ,host          ,noOp),\n          Field(\"user\"       ,user          ,noOp),\n          Field(\"port\"       ,port.toString ,noOp))\n\n      form(fields)\n    }\n  }\n","post-blank":1,"post-affiliated":970,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"paragraph","ref":"org59ec782","properties":{"post-blank":0,"post-affiliated":2406,"mode":null,"granularity":null},"contents":["Now we have a form component that'll build or inputs given a sequence of ",{"$$data_type":"org-node","type":"verbatim","ref":"org7b1a891","properties":{"post-blank":0,"value":"Field"},"contents":[]},"'s.\n"]}]}]},{"$$data_type":"org-node","type":"headline","ref":"org9a6c4e6","drawer":{},"properties":{"tags-all":[],"raw-value":"Making it dynamic","pre-blank":1,"robust-begin":2514,"robust-end":4143,"level":1,"priority":null,"tags":[],"todo-keyword":null,"todo-type":null,"post-blank":0,"footnote-section-p":false,"archivedp":false,"commentedp":false,"post-affiliated":2491,"title":["Making it dynamic"],"mode":null,"granularity":null,"cached":true,"org-element--cache-sync-key":[43]},"contents":[{"$$data_type":"org-node","type":"section","ref":"orgb4c4e87","properties":{"robust-begin":2512,"robust-end":4143,"post-blank":0,"post-affiliated":2512,"mode":"section","granularity":null},"contents":[{"$$data_type":"org-node","type":"paragraph","ref":"org28f68d3","properties":{"post-blank":1,"post-affiliated":2512,"mode":"planning","granularity":null},"contents":["Lets make this form actually edit the model.\nWe'll do that by making another component which will construct the form.\n"]},{"$$data_type":"org-node","type":"src-block","ref":"org4a86e33","properties":{"language":"scala","switches":null,"parameters":null,"number-lines":null,"preserve-indent":false,"retain-labels":true,"use-labels":true,"label-fmt":null,"value":"  object ConfigForm{\n    case class Props(onSubmit:Config=>Unit)\n    case class State(config:Config)\n\n    class Backend(t:BackendScope[Unit,State]){\n      def modifyRestricted(e:ReactEventI) = {\n        t.modState(\n          s=>s.copy(\n            config=s.config.copy(\n              restricted=e.currentTarget.value)))\n      }\n      def modifyHost(e:ReactEventI) = {\n        t.modState(\n          s=>s.copy(\n            config=s.config.copy(\n              mailConfig=s.config.mailConfig.copy(\n                host=e.currentTarget.value))))\n      }\n      def modifyUser(e:ReactEventI) = {\n        t.modState(\n          s=>s.copy(\n            config=s.config.copy(\n              mailConfig=s.config.mailConfig.copy(\n                user=e.currentTarget.value))))\n      }\n\n    }\n\n    val form = ReactComponentB[Unit](\"config-form\")\n      .initialState(State(Config.default))\n      .backend(new Backend(_))\n      .render((P,S,B) =>{\n        val Config(restricted,MailConfig(host,port,user)) = S.config\n        val Field = Form.Field\n\n        val fields = Seq(\n          Field(\"restricted\" ,restricted ,B.modifyRestricted),\n          Field(\"host\"       ,host       ,B.modifyHost),\n          Field(\"user\"       ,user       ,B.modifyUser))\n\n        Form.form(fields)\n      })\n      .buildU\n\n  }\n","post-blank":1,"post-affiliated":2631,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"paragraph","ref":"org3f4f032","properties":{"post-blank":0,"post-affiliated":3949,"mode":null,"granularity":null},"contents":["Those modify functions work, but man there's a lot of copying of case classes, it'd be nice if we could build functions that take care of that for us cleanly, especially as these structures grow.\n"]}]}]},{"$$data_type":"org-node","type":"headline","ref":"org3de5772","drawer":{},"properties":{"tags-all":[],"raw-value":"Enter lenses","pre-blank":1,"robust-begin":4163,"robust-end":5077,"level":1,"priority":null,"tags":[],"todo-keyword":null,"todo-type":null,"post-blank":0,"footnote-section-p":false,"archivedp":false,"commentedp":false,"post-affiliated":4145,"title":["Enter lenses"],"mode":null,"granularity":null,"cached":true,"org-element--cache-sync-key":[43]},"contents":[{"$$data_type":"org-node","type":"section","ref":"orgc39eb97","properties":{"robust-begin":4161,"robust-end":5077,"post-blank":0,"post-affiliated":4161,"mode":"section","granularity":null},"contents":[{"$$data_type":"org-node","type":"paragraph","ref":"orgb8a7e4b","properties":{"post-blank":1,"post-affiliated":4161,"mode":"planning","granularity":null},"contents":["Lenses give us a way to cleanly and safely edit a piece of a larger immutable structure.\n"]},{"$$data_type":"org-node","type":"src-block","ref":"orgb058132","properties":{"language":"scala","switches":null,"parameters":null,"number-lines":null,"preserve-indent":false,"retain-labels":true,"use-labels":true,"label-fmt":null,"value":"  val _config     = Lens[State,ConfigItem]      (_.config)     (v => s => s.copy(config=v))\n  val _restricted = Lens[ConfigItem,String]     (_.restricted) (v => c => c.copy(restricted=v))\n  val _mail       = Lens[ConfigItem,MailConfig] (_.mailConfig) (v => c => c.copy(mailConfig=v))\n  val _host       = Lens[MailConfig,String]     (_.host)       (v => m => m.copy(host=v))\n  val _port       = Lens[MailConfig,Int]        (_.port)       (v => m => m.copy(port=v))\n  val _user       = Lens[MailConfig,String]     (_.user)       (v => m => m.copy(user=v))\n  val _password   = Lens[MailConfig,String]     (_.password)   (v => m => m.copy(password=v))\n\n  val _eventV     = Lens[ReactEventI,String]    (_.currentTarget.value)   (v => m => m.copy(password=v))\n  val _mailconfig = _config composeLens _mail\n","post-blank":0,"post-affiliated":4251,"mode":null,"granularity":null},"contents":[]}]}]}]},"docType":"snippets"},{"name":"unity3d-meta","doc":{"$$data_type":"org-document","properties":{"title":["Fix Unity3d \"Missing Script\" issues"],"filetags":[],"author":["Michael McFarland"],"creator":"Emacs 28.0.60 (Org mode 9.6)","date":["2015-06-16"],"description":[],"email":"michaelmcfarland@michaels-air.lan","language":"en"},"contents":[{"$$data_type":"org-node","type":"section","ref":"orgae3fbb5","properties":{"robust-begin":1,"robust-end":531,"post-blank":1,"post-affiliated":1,"mode":"first-section","granularity":null},"contents":[{"$$data_type":"org-node","type":"keyword","ref":"org6e3706e","properties":{"key":"STARTUP","value":"showall indent","post-blank":0,"post-affiliated":1,"mode":"top-comment","granularity":null},"contents":[]},{"$$data_type":"org-node","type":"keyword","ref":"org459b356","properties":{"key":"OPTIONS","value":"num:nil","post-blank":0,"post-affiliated":27,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"keyword","ref":"orgc9e890d","properties":{"key":"TITLE","value":"Fix Unity3d \"Missing Script\" issues","post-blank":0,"post-affiliated":46,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"keyword","ref":"org15eaf0b","properties":{"key":"DATE","value":"2015-06-16","post-blank":0,"post-affiliated":91,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"keyword","ref":"org600d3f2","properties":{"key":"CATEGORY","value":"Unity3D","post-blank":0,"post-affiliated":110,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"keyword","ref":"org575c6c3","properties":{"key":"DESCRIPTION","value":"Fix the annoying \"Missing Script\" errors that occur when you start sharing assets on a team.","post-blank":3,"post-affiliated":130,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"paragraph","ref":"org4e7741f","properties":{"post-blank":0,"post-affiliated":240,"mode":null,"granularity":null},"contents":["If you've ever worked on a team using Unity3d, somebody has forgotten to commit a .meta file.\nIt's fairly easy to do, and pretty hard to notice you're doing it (things still work for you, just not others who pull your work in). I've been bitten by this mistake plenty, from myself and others.\n"]}]},{"$$data_type":"org-node","type":"headline","ref":"org9fb6518","drawer":{},"properties":{"tags-all":[],"raw-value":"Why does this happen","pre-blank":0,"robust-begin":559,"robust-end":826,"level":1,"priority":null,"tags":[],"todo-keyword":null,"todo-type":null,"post-blank":1,"footnote-section-p":false,"archivedp":false,"commentedp":false,"post-affiliated":534,"title":["Why does this happen"],"mode":null,"granularity":null},"contents":[{"$$data_type":"org-node","type":"section","ref":"org93d2ae3","properties":{"robust-begin":557,"robust-end":826,"post-blank":1,"post-affiliated":557,"mode":"section","granularity":null},"contents":[{"$$data_type":"org-node","type":"paragraph","ref":"orgfef6630","properties":{"post-blank":0,"post-affiliated":557,"mode":"planning","granularity":null},"contents":["The .meta file holds GUID for the given asset, which is how the editor associates assets for serialized data (your prefabs and scenes).\nWhen you're serialized data references the wrong id, then you get missing references that show up like \"Missing Script\" in the editor.\n"]}]}]},{"$$data_type":"org-node","type":"headline","ref":"org6209497","drawer":{},"properties":{"tags-all":[],"raw-value":"The solution","pre-blank":0,"robust-begin":846,"robust-end":3923,"level":1,"priority":null,"tags":[],"todo-keyword":null,"todo-type":null,"post-blank":1,"footnote-section-p":false,"archivedp":false,"commentedp":false,"post-affiliated":829,"title":["The solution"],"mode":null,"granularity":null,"cached":true,"org-element--cache-sync-key":[14]},"contents":[{"$$data_type":"org-node","type":"section","ref":"org30f2c49","properties":{"robust-begin":844,"robust-end":3923,"post-blank":1,"post-affiliated":844,"mode":"section","granularity":null},"contents":[{"$$data_type":"org-node","type":"paragraph","ref":"orgba2bf54","properties":{"post-blank":1,"post-affiliated":844,"mode":"planning","granularity":null},"contents":["Don't let people commit and push assets without metas.\n"]},{"$$data_type":"org-node","type":"paragraph","ref":"orgd859b64","properties":{"post-blank":1,"post-affiliated":900,"mode":null,"granularity":null},"contents":["Most version control systems have hooks that you can run your own scripts in,\nMercurials no different.\n"]},{"$$data_type":"org-node","type":"paragraph","ref":"org7e69cc2","properties":{"post-blank":1,"post-affiliated":1004,"mode":null,"granularity":null},"contents":["You can make a pre-commit hook that will look at all your assets\nand make sure none are missing a meta.\n"]},{"$$data_type":"org-node","type":"paragraph","ref":"orgbae1abf","properties":{"post-blank":1,"post-affiliated":1109,"mode":null,"granularity":null},"contents":["I've made one below. It's worked fine for windows and mac machines,\nand some version of it has been in every unity project I've done since.\n"]},{"$$data_type":"org-node","type":"src-block","ref":"org0e98dd1","properties":{"language":"python","switches":null,"parameters":null,"number-lines":null,"preserve-indent":false,"retain-labels":true,"use-labels":true,"label-fmt":null,"value":"  import os\n  import mercurial.commands\n\n  class HG:\n    def __init__(self,ui,repo):\n      self.ui = ui\n      self.repo = repo\n      self.files = self.getAddedFiles()\n\n    def existsInRepo(self, filename):\n      self.ui.pushbuffer()\n      mercurial.commands.locate(self.ui,self.repo,include=[filename])\n      files = self.ui.popbuffer().split(\"\\n\")\n\n      for repoFile in files:\n        if(pathsEqual(filename,repoFile)):\n          return True\n\n      return False\n\n    def getAddedFiles(self):\n      self.ui.pushbuffer()\n      mercurial.commands.status(self.ui,self.repo,no_status=True, added = True)\n      files = self.ui.popbuffer().split(\"\\n\")\n      return files\n\n    def filesExistInDir(self,dirname):\n      self.ui.pushbuffer()\n      mercurial.commands.locate(self.ui,self.repo,include=[dirname])\n      files = self.ui.popbuffer().split(\"\\n\")\n      files = filter(lambda x:x != \"\", files)\n      return len(files) > 0\n\n    def show(self, message):\n      self.ui.status(message + \"\\n\")\n\n  def precommit(ui,repo, **kwargs):\n    hg = HG(ui,repo)\n    clean = checkFiles(hg)\n    return not clean;\n\n  def pathsEqual(a,b):\n    return os.path.normcase(a) == os.path.normcase(b)\n\n\n  def checkFiles(hg):\n\n    path = os.path.normcase(\"UnityProject/Assets/\")\n\n    result = True\n    files = hg.files\n    for singleFile in files:\n      if singleFile == '':\n        continue\n\n      if not os.path.normcase(singleFile).startswith(path):\n        continue\n\n      isMetaFile = singleFile.endswith(\".meta\")\n\n      filename = singleFile if not isMetaFile else singleFile.replace(\".meta\", \"\")\n      metaFile = singleFile if isMetaFile else singleFile + \".meta\"\n\n      isFolder = os.path.isdir(os.path.normcase(filename))\n\n      if isMetaFile:\n        if isFolder:\n          if not hg.filesExistInDir(filename):\n            hg.show(\"Commiting a meta file'\" + metaFile +\n              \"' for a directory which contains no files.\" )\n            return False\n        else:\n          if not hg.existsInRepo(filename):\n            hg.show(\"Commiting a meta file'\" + metaFile +\n              \"' without adding associated file '\" + filename + \"'.\")\n            return False\n\n      else:\n        if not hg.existsInRepo(metaFile):\n          hg.show(\"Committing a file '\" + filename +\n            \"' without adding associated meta file '\" + metaFile + \"'.\")\n          return False\n\n\n    return result\n","post-blank":1,"post-affiliated":1250,"mode":null,"granularity":null},"contents":[]},{"$$data_type":"org-node","type":"paragraph","ref":"orgc5a3b6f","properties":{"post-blank":0,"post-affiliated":3652,"mode":null,"granularity":null},"contents":["This ",{"$$data_type":"org-node","type":"bold","ref":"org494e235","properties":{"post-blank":0},"contents":["doesn't handle .meta files for directories"]},". I couldn't think of an elegant way\nTo locate directories from the hg API. Mercurial has no concept of them, files are just at paths.\nThis hasn't been a problem and, AFAIK, directories aren't referenced in serialized data.\n"]}]}]},{"$$data_type":"org-node","type":"headline","ref":"org72c3b44","drawer":{},"properties":{"tags-all":[],"raw-value":"Usage","pre-blank":0,"robust-begin":3936,"robust-end":4832,"level":1,"priority":null,"tags":[],"todo-keyword":null,"todo-type":null,"post-blank":0,"footnote-section-p":false,"archivedp":false,"commentedp":false,"post-affiliated":3926,"title":["Usage"],"mode":null,"granularity":null,"cached":true,"org-element--cache-sync-key":[24]},"contents":[{"$$data_type":"org-node","type":"headline","ref":"org0a44073","drawer":{},"properties":{"tags-all":[],"raw-value":"Configure your asset folder path","pre-blank":1,"robust-begin":3973,"robust-end":4264,"level":2,"priority":null,"tags":[],"todo-keyword":null,"todo-type":null,"post-blank":1,"footnote-section-p":false,"archivedp":false,"commentedp":false,"post-affiliated":3934,"title":["Configure your asset folder path"],"mode":"section","granularity":null},"contents":[{"$$data_type":"org-node","type":"section","ref":"orgbb73c97","properties":{"robust-begin":3971,"robust-end":4264,"post-blank":1,"post-affiliated":3971,"mode":"section","granularity":null},"contents":[{"$$data_type":"org-node","type":"paragraph","ref":"orge73e678","properties":{"post-blank":0,"post-affiliated":3971,"mode":"planning","granularity":null},"contents":["in ",{"$$data_type":"org-node","type":"verbatim","ref":"orgf87322f","properties":{"post-blank":1,"value":"checkFiles"},"contents":[]},"alter the ",{"$$data_type":"org-node","type":"verbatim","ref":"org59aaa02","properties":{"post-blank":1,"value":"path"},"contents":[]},"variable so that it points to your assets directory.\nThe current value reflects my projects, which generally have the unity project folder start at the path ",{"$$data_type":"org-node","type":"verbatim","ref":"org1a7a0d1","properties":{"post-blank":0,"value":"UnityProject"},"contents":[]},".\nThe script only checks the files under that path, and it's relative to your repo's root.\n"]}]}]},{"$$data_type":"org-node","type":"headline","ref":"org6c197d9","drawer":{},"properties":{"tags-all":[],"raw-value":"Add the hook","pre-blank":0,"robust-begin":4285,"robust-end":4832,"level":2,"priority":null,"tags":[],"todo-keyword":null,"todo-type":null,"post-blank":0,"footnote-section-p":false,"archivedp":false,"commentedp":false,"post-affiliated":4267,"title":["Add the hook"],"mode":null,"granularity":null,"cached":true,"org-element--cache-sync-key":[24]},"contents":[{"$$data_type":"org-node","type":"section","ref":"org6057091","properties":{"robust-begin":4283,"robust-end":4832,"post-blank":0,"post-affiliated":4283,"mode":"section","granularity":null},"contents":[{"$$data_type":"org-node","type":"paragraph","ref":"org906fcd5","properties":{"post-blank":1,"post-affiliated":4283,"mode":"planning","granularity":null},"contents":["Mercurial needs you to ",{"$$data_type":"org-node","type":"link","ref":"org84ec200","properties":{"type":"https","path":"//www.mercurial-scm.org/wiki/Hook","format":"bracket","raw-link":"https://www.mercurial-scm.org/wiki/Hook","application":null,"search-option":null,"post-blank":1,"is-internal":false,"target-ref":null,"is-inline-image":false},"contents":["register the hook"]},"in your hg config.\nEveryone on the team should register and use this pre-commit hook in order for it to be effective.\nI keep them in hooks directory for the project for that reason.\n"]},{"$$data_type":"org-node","type":"paragraph","ref":"orgfe57b21","properties":{"post-blank":1,"post-affiliated":4552,"mode":null,"granularity":null},"contents":["For example, Lets say you saved the above script to a file in your repo at ",{"$$data_type":"org-node","type":"verbatim","ref":"org4572ffc","properties":{"post-blank":0,"value":"hooks/checkMetas.py"},"contents":[]},".\n"]},{"$$data_type":"org-node","type":"paragraph","ref":"org00d1402","properties":{"post-blank":1,"post-affiliated":4651,"mode":null,"granularity":null},"contents":["Then you would add these lines to your ",{"$$data_type":"org-node","type":"verbatim","ref":"org69cdd96","properties":{"post-blank":1,"value":".hg/hgrc"},"contents":[]},"file.\n"]},{"$$data_type":"org-node","type":"src-block","ref":"orgb11d2be","properties":{"language":"python","switches":null,"parameters":null,"number-lines":null,"preserve-indent":false,"retain-labels":true,"use-labels":true,"label-fmt":null,"value":"    [hooks]\n    precommit.checkMetas = python:/pathToUnityRepo/hooks/checkMetas.py:precommit\n","post-blank":0,"post-affiliated":4708,"mode":null,"granularity":null},"contents":[]}]}]}]}]},"docType":"snippets"}]},"__N_SSG":true}